import { VideoSummary } from '../models/VideoSummary.js';
import { getSummary as getGeminiSummary } from './summarizer.js';
import logger from '../utils/logger.js';

/**
 * Generate or update video summary for current segment
 */
export const generateSummary = async (req, res) => {
  try {
    const { roomCode, userId, username, videoUrl, videoDuration } = req.body;
    
    if (!roomCode) {
      return res.status(400).json({ 
        error: 'Missing required field: roomCode' 
      });
    }

    // Generate a simple videoId from the URL or use roomCode
    const videoId = videoUrl ? btoa(videoUrl).replace(/[^a-zA-Z0-9]/g, '').substring(0, 16) : roomCode;
    
    // Create sample content for AI to summarize
    const sampleContent = `Video content analysis for room ${roomCode}. 
    Video URL: ${videoUrl || 'No URL provided'}
    Duration: ${videoDuration || 0} seconds
    Generated by: ${username} (${userId})
    
    This is a collaborative video viewing session where participants can discuss and analyze the content together.`;

    // Use Gemini AI to generate summary
    const aiSummary = await getGeminiSummary({ 
      transcript: sampleContent, 
      untilTimestamp: videoDuration 
    });
    
    let summary = await VideoSummary.findOne({ videoId, roomCode });
    
    if (!summary) {
      summary = new VideoSummary({
        videoId,
        roomCode,
        segments: [],
        fullSummary: aiSummary,
        keyInsights: extractKeyInsights(aiSummary),
        generatedAt: new Date(),
        generatedBy: username || 'AI Assistant'
      });
    } else {
      // Update existing summary
      summary.fullSummary = aiSummary;
      summary.keyInsights = extractKeyInsights(aiSummary);
      summary.lastUpdated = new Date();
      summary.generatedBy = username || 'AI Assistant';
    }
    
    await summary.save();
    
    logger.info(`📝 AI Summary generated for room ${roomCode} by ${username}`);
    
    res.json({
      success: true,
      summary: {
        fullSummary: summary.fullSummary,
        keyInsights: summary.keyInsights,
        segments: summary.segments,
        generatedAt: summary.generatedAt,
        generatedBy: summary.generatedBy
      }
    });
  } catch (error) {
    logger.error(`❌ Error generating summary: ${error.message}`);
    res.status(500).json({ error: 'Failed to generate summary. Please check if AI service is configured.' });
  }
};

/**
 * Get existing summary for a video
 */
export const getSummary = async (req, res) => {
  try {
    const { roomCode } = req.params;
    
    const summary = await VideoSummary.findOne({ roomCode });
    
    if (!summary) {
      return res.status(404).json({ error: 'Summary not found' });
    }
    
    res.json({
      summary: {
        fullSummary: summary.fullSummary,
        keyInsights: summary.keyInsights,
        segments: summary.segments,
        lastUpdated: summary.lastUpdated,
        generatedAt: summary.generatedAt,
        generatedBy: summary.generatedBy
      }
    });
  } catch (error) {
    logger.error(`❌ Error fetching summary: ${error.message}`);
    res.status(500).json({ error: 'Failed to fetch summary' });
  }
};

/**
 * Export summary as text file
 */
export const exportSummary = async (req, res) => {
  try {
    const { roomCode } = req.params;
    const { format = 'text' } = req.query;
    
    const summary = await VideoSummary.findOne({ roomCode });
    
    if (!summary) {
      return res.status(404).json({ error: 'Summary not found' });
    }
    
    if (format === 'json') {
      res.setHeader('Content-Type', 'application/json');
      res.setHeader('Content-Disposition', `attachment; filename="video_summary_${roomCode}.json"`);
      res.json({
        roomCode: summary.roomCode,
        fullSummary: summary.fullSummary,
        keyInsights: summary.keyInsights,
        segments: summary.segments,
        generatedAt: summary.generatedAt,
        generatedBy: summary.generatedBy
      });
    } else {
      const exportText = formatSummaryForExport(summary);
      res.setHeader('Content-Type', 'text/plain');
      res.setHeader('Content-Disposition', `attachment; filename="video_summary_${roomCode}.txt"`);
      res.send(exportText);
    }
  } catch (error) {
    logger.error(`❌ Error exporting summary: ${error.message}`);
    res.status(500).json({ error: 'Failed to export summary' });
  }
};

/**
 * Extract key insights from AI summary
 */
function extractKeyInsights(aiSummary) {
  // Simple extraction - in a real implementation, this could use NLP
  const sentences = aiSummary.split(/[.!?]+/).filter(s => s.trim().length > 20);
  return sentences.slice(0, 5).map(s => s.trim());
}

/**
 * Mock AI segment summary generation
 */
async function generateSegmentSummary(videoId, currentTime) {
  // This would integrate with actual AI service (OpenAI, Claude, etc.)
  const mockSummaries = [
    "Introduction to the main characters and setting",
    "Key plot development and character interactions",
    "Important dialogue and scene transitions",
    "Action sequence with significant events",
    "Resolution and conclusion of the segment"
  ];
  
  const startTime = Math.max(0, currentTime - 30); // 30-second segments
  const endTime = currentTime;
  
  return {
    startTime,
    endTime,
    summary: mockSummaries[Math.floor(Math.random() * mockSummaries.length)],
    keyWords: ["character", "plot", "scene", "dialogue"],
    importance: Math.ceil(Math.random() * 5)
  };
}

/**
 * Generate full summary from segments
 */
function generateFullSummary(segments) {
  return segments
    .sort((a, b) => a.startTime - b.startTime)
    .map((segment, index) => `${index + 1}. ${segment.summary}`)
    .join('\n');
}

/**
 * Format summary for text export
 */
function formatSummaryForExport(summary) {
  const header = `Video Summary - Room ${summary.roomCode}\n`;
  const generatedInfo = `Generated: ${summary.generatedAt.toDateString()} by ${summary.generatedBy}\n`;
  const separator = '='.repeat(50) + '\n\n';
  
  const fullSummary = `FULL SUMMARY:\n${summary.fullSummary}\n\n`;
  
  let keyInsights = '';
  if (summary.keyInsights && summary.keyInsights.length > 0) {
    keyInsights = 'KEY INSIGHTS:\n' + 
      summary.keyInsights.map((insight, index) => `${index + 1}. ${insight}`).join('\n') + '\n\n';
  }
  
  let segmentDetails = '';
  if (summary.segments && summary.segments.length > 0) {
    segmentDetails = 'DETAILED SEGMENTS:\n' + 
      summary.segments
        .sort((a, b) => a.startTime - b.startTime)
        .map((segment, index) => 
          `${index + 1}. Time: ${formatTime(segment.startTime)} - ${formatTime(segment.endTime)}\n` +
          `   Summary: ${segment.summary}\n` +
          `   Keywords: ${segment.keyWords ? segment.keyWords.join(', ') : 'None'}\n` +
          `   Importance: ${segment.importance || 'N/A'}/5\n`
        ).join('\n');
  }
  
  return header + generatedInfo + separator + fullSummary + keyInsights + segmentDetails;
}

/**
 * Format seconds to mm:ss
 */
function formatTime(seconds) {
  const minutes = Math.floor(seconds / 60);
  const secs = Math.floor(seconds % 60);
  return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}
